#:schema https://gist.githubusercontent.com/reubenmiller/4e28e8403fe0c54b7461ac7d1d6838c2/raw/4ad7e3bc3ce2e3a7542a5b4873a0196cbe91f35d/tedge.workflow.json
operation = "firmware_update"
on_error = "failed"

[init]
action = "proceed"
on_success = "scheduled"

[scheduled]
action = "proceed"
on_success = "executing"

[executing]
script = "/usr/bin/swupdate_workflow.sh ${.payload.status}"
on_success = "download"

[download]
script = "/usr/bin/swupdate_workflow.sh ${.payload.status} --url ${.payload.remoteUrl}"
on_success = "install"

[install]
script = "/usr/bin/swupdate_workflow.sh ${.payload.status} --url ${.payload.url}"
on_exit.0 = { status = "verify" }
on_exit.4 = { status = "restart", reason = "Install was successful, rebooting device into spare partition" }
on_exit._ = { status = "failed", reason = "Verification failed, no rollback necessary" }

[restart]
operation = "restart"
on_exec = "await_restart"

[await_restart]
action = "await-operation-completion"
on_success = "restarted"
on_error = { status = "failed", reason = "Failed to restart device" }

[restarted]
script = "/usr/bin/swupdate_workflow.sh ${.payload.status}"
on_success = "verify"
# Always go to the commit state as the commit will do the verification...otherwise the rollback could be skipped
on_error = "verify"

[verify]
script = "/usr/bin/swupdate_workflow.sh ${.payload.status}"
on_success = { status = "commit" }
on_error = { status = "rollback", reason = "Verification failed, need to rollback" }

[commit]
script = "/usr/bin/swupdate_workflow.sh ${.payload.status} --firmware-name ${.payload.name} --firmware-version ${.payload.version} --url ${.payload.remoteUrl} --expected-partition ${.payload.nextPartition}"
on_exit.0 = { status = "successful" }
on_exit.2 = { status = "failed", reason = "Nothing to commit. Either the boot loader triggered the rollback, the device was rebooted after switching to new partition, or someone did a manual commit or rollback!"}
on_exit._ = { status = "rollback", reason = "Rauc commit failed. Rolling back to previous partition" }

[rollback]
script = "/usr/bin/swupdate_workflow.sh ${.payload.status}"
on_success = { status = "rollback_restart" }
on_error = { status = "rollback_restart" }

[rollback_restart]
operation = "restart"
on_exec = "await_rollback_restart"

[await_rollback_restart]
action = "await-operation-completion"
on_success = "rollback_successful"

[rollback_successful]
script = "/usr/bin/swupdate_workflow.sh ${.payload.status}"
on_success = {status = "failed", reason = "Update failed but rollback was successful"}

[successful]
action = "cleanup"

[failed]
action = "cleanup"
